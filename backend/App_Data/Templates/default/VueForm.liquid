<template>
  <el-dialog
    :title="formData ? '编辑{{EntityName}}' : '新增{{EntityName}}'"
    v-model="visible"
    width="500px"
    :close-on-click-modal="false"
  >
    <el-form
      ref="formRef"
      :model="form"
      :rules="rules"
      label-width="100px"
    >
      {% for column in Schema.Columns %}
      {% unless column.IsIdentity %}
      <el-form-item label="{{column.Name}}" prop="{{column.Name | downcase}}">
        {% case column.DataType %}
        {% when 'string' %}
        <el-input v-model="form.{{column.Name | downcase}}" />
        {% when 'int' %}
        <el-input-number v-model="form.{{column.Name | downcase}}" />
        {% when 'decimal' %}
        <el-input-number v-model="form.{{column.Name | downcase}}" :precision="2" />
        {% when 'datetime' %}
        <el-date-picker v-model="form.{{column.Name | downcase}}" type="datetime" />
        {% when 'bool' %}
        <el-switch v-model="form.{{column.Name | downcase}}" />
        {% else %}
        <el-input v-model="form.{{column.Name | downcase}}" />
        {% endcase %}
      </el-form-item>
      {% endunless %}
      {% endfor %}
    </el-form>
    <template #footer>
      <span class="dialog-footer">
        <el-button @click="visible = false">取消</el-button>
        <el-button type="primary" @click="handleSubmit" :loading="loading">
          确定
        </el-button>
      </span>
    </template>
  </el-dialog>
</template>

<script setup>
import { ref, watch } from 'vue'
import { ElMessage } from 'element-plus'
import { create{{EntityName}}, update{{EntityName}} } from '@/api/{{EntityName | downcase}}'

const props = defineProps({
  visible: Boolean,
  formData: Object
})

const emit = defineEmits(['update:visible', 'success'])

const formRef = ref(null)
const loading = ref(false)
const form = ref({})

const rules = {
  {% for column in Schema.Columns %}
  {% unless column.IsIdentity %}
  {{column.Name | downcase}}: [
    {% if column.IsNullable == false %}
    { required: true, message: '请输入{{column.Name}}', trigger: 'blur' },
    {% endif %}
    {% if column.MaxLength != null %}
    { max: {{column.MaxLength}}, message: '长度不能超过{{column.MaxLength}}个字符', trigger: 'blur' }
    {% endif %}
  ],
  {% endunless %}
  {% endfor %}
}

watch(() => props.formData, (val) => {
  if (val) {
    form.value = { ...val }
  } else {
    form.value = {}
  }
}, { immediate: true })

const handleSubmit = async () => {
  if (!formRef.value) return
  
  try {
    await formRef.value.validate()
    loading.value = true
    
    if (props.formData) {
      await update{{EntityName}}(props.formData.id, form.value)
      ElMessage.success('更新成功')
    } else {
      await create{{EntityName}}(form.value)
      ElMessage.success('创建成功')
    }
    
    emit('success')
  } catch (error) {
    ElMessage.error(error.message || '操作失败')
  } finally {
    loading.value = false
  }
}

defineExpose({
  form
})
</script> 
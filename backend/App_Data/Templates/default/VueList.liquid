<template>
  <div class="{{ EntityName | downcase }}-list">
    <el-card>
      <template #header>
        <div class="card-header">
          <span>{{ EntityName }}管理</span>
          <el-button type="primary" @click="handleAdd">新增</el-button>
        </div>
      </template>

      <el-table :data="tableData" v-loading="loading">
        {% for column in Schema.Columns %}
        <el-table-column prop="{{ column.Name | downcase }}" label="{{ column.Name }}" />
        {% endfor %}
        <el-table-column label="操作" width="200">
          <template #default="scope">
            <el-button size="small" @click="handleEdit(scope.row)">编辑</el-button>
            <el-button size="small" type="danger" @click="handleDelete(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-card>

    <{{ EntityName }}Form
      v-model:visible="formVisible"
      :form-data="formData"
      @success="handleSuccess"
    />
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { get{{ EntityName }}List, delete{{ EntityName }} } from '@/api/{{ EntityName | downcase }}'
import {{ EntityName }}Form from './{{ EntityName }}Form.vue'

const tableData = ref([])
const loading = ref(false)
const formVisible = ref(false)
const formData = ref(null)

const loadData = async () => {
  loading.value = true
  try {
    const { data } = await get{{ EntityName }}List()
    tableData.value = data
  } catch (error) {
    ElMessage.error('加载数据失败')
  }
  loading.value = false
}

const handleAdd = () => {
  formData.value = null
  formVisible.value = true
}

const handleEdit = (row) => {
  formData.value = { ...row }
  formVisible.value = true
}

const handleDelete = async (row) => {
  try {
    await ElMessageBox.confirm('确认删除该记录吗？')
    await delete{{ EntityName }}(row.id)
    ElMessage.success('删除成功')
    loadData()
  } catch (error) {
    if (error !== 'cancel') {
      ElMessage.error('删除失败')
    }
  }
}

const handleSuccess = () => {
  formVisible.value = false
  loadData()
}

onMounted(() => {
  loadData()
})
</script>

<style scoped>
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
</style> 